 =======================================================
Boas práticas na programação:

1-) Documentação
/**
 * Descrição do código (o que faz?)
 * @author Emmanuel L. Nogueira
 * @link https://github.com/emmanuel-lacerd4
 */

2-) Código limpo
- Não abusar de comentários

3-) Nomeação:
   - Não usar caracteres especiais, espaço e acentos
   - Nomes de arquivos, variáveis, funções devem ser    escritos com a primeira letra em caixa baixa (letra minúscula), iniciar com caixa alta (letra maiúscula) apenas classes modelos.
   - definir nomes que tenham relação com o problema a ser resolvido.

4-) Alinhamento (identação do código)

5-) Quanto menos código usado para o problema melhor!
========================================================
 Comandos de terminal:

 cls ou clear (limpar a tela do terminal)
 node -v  (exibe a versão do node)
 cd pasta (entrar na pasta)
 cd .. (voltar um nível)
 dir ou ls (listar os arquivos e diretórios)
 node arquivo.js (executar um arquivo JavaScript)
 seta para cima (repete os comandos)
 <tab> completa o comandos
========================================================
VSCode: Dicas
Combinação de teclas <alt><shift><f> //alinhamento
Mais dicas: VS Code: Produtividade Infinita (repositório)
========================================================
JavaScript:

Características:
- Sentenças e não linhas de código
- ; é opcional
console.clear() //limpar a tela do console
console.log() //escrever no console
// comentários de linhas
Podemos usar aspas " " ou ' '
Não podemos usar aspas diferentes " ' ou ' "
Dica: Usar em textos "aspas"
      Usar em bibliotecas ou caminhos 'apóstrofo'
========================================================
Operadores:

Observações:
- Regra de precedência
- % (não calcula porcentagem e sim o resto da divisão)
Ex:
    |  3
 10 |______
  1    3

10 / 3  //3.33
10 % 3  //resultado é 1

Comparadores de igualdade:
NÃO USAR == !=

Operadores lógicos:
Dica:
professorjosedeassis.github.io/simulador
========================================================
Estudo das variáveis:
- String (caracteres)
- Numéricas (números)
- Booleanas (verdadeiro ou falso)

Obs: No JS as variáveis são dinâmicamente tipadas
const (criar uma constante)
var ou let (criar uma variável)
ATENÇÃO!!! Não usar jamais o var

Tipagem dinâmica:
No JavaScript o tipo string é definido quando o conteúdo da variável estiver entre aspas ""

Variáveis numéricas podem ser números inteiros e não inteiros
Observação , (vírgula é um caractere e não número)
se necessário converter a entrada de dados de "," para "."
.replace(",",".") 

Na entrada de dados numéricos via terminal ou formulário é necessário converter para números
classe Number
========================================================
Git e GitHub
Material de apoio:
https://www.youtube.com/playlist?list=PLbEOwbQR9lqzK14I7OOeREEIE4k6rjgIj

Configurando o git
- Instalar o git
Abrir o git bash
git config --global user.name "seu nome"
git config --global user.email "seu email github"

git clone link_do_repositório (clonar o repositório na máquina local)

Observação: digitar os comandos na raiz do repositório
git status (verifica o status do repositório local em relação ao GitHub)
git add . (adiciona todas as alterações)
git commit -m "descrição das alterações"
========================================================
NODE - Plataforma para uso do JS fora do browser(navegador)
 |__ V8 (google chromium)
 |__ bibliotecas C / C++
 |__ pacotes npm (node packager manager)
 npm ls (lista os pacotes)
 npm i ou npm install (instala um pacote)
 npm r nome_do_pacote (remove o pacote)

 Pacote = Módulo = biblioteca
 Para usar um pacote é necessário fazer a importação no início do código (logo abaixo do cabeçalho de documentação)
========================================================
Algorítmo: "receita de bolo"

Exemplo 1:
Objetivo: Calcular a média de 2 notas

         nota 1 + nota 2
média = _________________
                2

Variáveis: nota1,nota2,media

Entrada: nota1,nota2
Processamento: media = (nota1 + nota2) / 2
Saída: media

========================================================
Exemplo 2:
Desenvolver um app modo console para cálculo de porcentagem: 
Ex: 10% de 200 = 20
     x      y   valor

Algorítmo:

y ------------ 100%
valor ---------- x

valor * 100 = y * x

          y * x               
valor = ___________    
           100       

valor = (x * y) / 100

//variáveis
x,y,valor

//entrada
x,y

//Processamento
valor = (x * y) / 100

//Saída
valor

Exercício 1:
Desenvolver um app modo console para calcular o valor do desconto:
Ex:
valor total: 200.00
desconto: 5%
total com desconto: 190.00

valor com desconto = valor total - desconto

// variáveis
total, desconto, valor, totalDesconto

//entrada
total, desconto

//processamento 1
valor = (desconto * total) / 100

//saída 1
valor

//processamento 2
totalDesconto = total - valor

//saída 2
totalDesconto

Exercício 2: Desenvolver um app no console para conversão de moeda (real para euro)

cotação da moeda: 5.89

Para converter de real para euro, dividir o valor em reais pela cotação do euro

//variáveis
real, euro, total

//entrada
real, euro

//processamento
total = real / euro

//saída
total
========================================================
Estruturas de controle

condicionais:
if if-else (encadeamento/aninhamento else if) switch-case

repetições:
for while do-while

if (condição) {
   //condição verdadeira
}

if (condição) {
   //condição verdadeira
} else {
   //condição falsa
}

Observações:
1-) Sempre uma resposta será exibida independente da condição
2-) Não pode existir uma condição verdeira e falsa ao memso tempo

Exemplo de uso da estrutura else if
No exemplo cálculo da média, estabelecer as seguintes condições:
1-) Se o aluno tiver média menor que 2 (REPROVADO)
2-) Se a média do aluno estiver entre 2 e 5 (RECUPERAÇÃO)
3-) Se a média for igual ou superior a 5 (APROVADO)

Resumindo:
if(condição 1) {
   //condição 1 verdadeira
} else if(condição 2) {
   //condição 2 verdadeira
} else if(condição 3) {
   //condição 3 verdadeira
} else {
   //nenhuma das condições anteriores verdadeiras
}

Obs: O else final não é obrigatório

Exercício 3:
No Brasil, o voto pode ser proibido, obrigatório ou facultativo, de acordo com os seguintes critérios:

idade menor que 16 (proibido votar)
idade entre 18 e 70 (incluindo 18 e 70) (voto obrigatório)
16,17 ou acima de 70 (voto é opcional)

Desenvolva no console do JS um APP para verificar em função da idade a obrigação ou não de votar. Testar com os valores 15(proibido),16,17(facultativo),18,70(obrigatório) e 71(facultativo)
========================================================
Estrutura de controle condicional: switch-case
Sintaxe:
variável (número inteiro ou letra)
switch(variável) {
   case: 1
      //código se o valor da variável for igual a 1
      break
   case: 2
      //código se o valor da variável for igual a 2
      break
   default:
      //código caso valor diferente de 1 ou 2
      break
}
========================================================Exercício 4: Desenvolva no console do JS um aplicativo
que faça o sorteio de um jogo de dado, ao resultado associar usando switch case a imagem da face do dado correspondente
Exemplo:

 ------
| o  o |
| o  o |
 ------  

Atividade 2 - Avaliação em dupla - desenvolvimento do jogo JokenPow, conforme modelo abaixo:
    __ _____ _____ _____ _____ _____ _____ _ _ _
 __|  |     |  |  |   __|   | |  _  |     | | | |
|  |  |  |  |    -|   __| | | |   __|  |  | | | |
|_____|_____|__|__|_____|_|___|__|  |_____|_____|

1. Pedra
2. Papel
3. Tesoura
Digite a opcao desejada: 1
========================================================
Jogador escolheu Pedra
Computador escolheu Tesoura
JOGADOR VENCEU
========================================================
Estruturas de controle - laços de repetições
for
while
do-while

for - estrutura de repetição finita(determinada)

for (let i=1; condição; incremento/decremento) {
    //início; repetir enquanto condição verdadeira; i++ ou i--
}

//obs: a variável declarada dentro da estrutura deve ser um número inteiro

Exercício 5:
5.1 Escreva um código que some todos os números de 1 a 100 e exiba o resultado no console.

5.2 Escreva um código que use um laço for para contar quantos números pares existem de 1 a 20.

while do-while - estruturas de repetições infinitas

while (condição) {
   // analisa a condição e executa o código enquanto a condição for verdadeira
}

do {
   // sempre executa o código uma vez independente da condição, depois se comporta como while
} while(condição)

Exercício 6:
Desenvolver um aplicativo para calcular a tabuada, semelhante ao exemplo de aula usando a estrutura while no lugar do for
========================================================
Funções:
Uma função é um bloco de código que realiza uma tarefa específica ou calcula um valor. Você pode pensar nela como uma "receita" que você escreve uma vez e pode usar várias vezes, sem precisar reescrever o código.

Nomeie funções de acordo com o problema a ser resolvido
Use "verbos" para nomear funções. Ex: calcular() cadastrar()

Para criar uma função simples(literal) usamos a palavra reservada function, e escolhemos um nome, conforme sintaxe abaixo:

function nome() {
   //código
}

Para executar uma função devemos escrever o nome da função seguido de parêntese:
nome()

// variáveis
Tipos primitivos: string, number, boolean
Outros tipos: function, object

// Funções em JavaScript

- literais (nome)

- atribuídas (variável) "Função anônima"
São funções atribuídas a uma constante ou variável onde o resultado do processamento da função é armazenado e pode ser utilizado, além disso funções atribídas podem ser simplificadas
(arrow function)

Atividade 3 (Avaliação em dupla)
Desenvolver uma calculadora no console usando funções, conforme modelo abaixo:

Calculadora:
Digite o primeiro número: 10
Digite o segundo número: 5

Opções:
1. Somar
2. Subtrair
3. Multiplicar
4. Dividir
5. Calcular a porcentagem

Digite a opcao desejada: 1
10 + 5 = 15
========================================================
POO

- Abstração (classe modelo)
- Herança
- Polimorfismo

- Encapsulamento (segurança)
Slides de apoio: (49 a 60)
https://professorjosedeassis.github.io/javaSE/#/49

Obs: Para criar uma classe modelo usamos uma letra maiúscula no ínicio

No JS a classe modelo é uma função

Sempre que existir a palavra new um objeto é criado(instanciado)

O ponto após o objeto é usado para acessar os recursos (atributos e métodos) da classe modelo

Polimorfismo:
Atencão! Para reescrever um método é necessário usar o "MESMO" nome do método original

Atividade 4: Avaliação individual
SLides 16 a 20 (POO Exercício 1 - carros)

Encapsulamento:
- Reforço na segurança dos atributos(variáveis)
Dica: get e set (acesso a variável encapsulada)
========================================================
Array (vetor)
Na linguagem JavaScript array é um objeto

Array multidimensional (matriz)
É um array que contém outro(s) array(s)